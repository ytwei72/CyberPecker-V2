#!/usr/bin/env python
# coding=utf-8

"""
    ID: vs_process.py
    Date: 2016/08/19

    Subject: 本模块实现漏洞扫描线程模块, 主要实现函数有：
            run(): 执行线程模块
            stop(): 停止线程模块
            is_Alive()： 判断线程模块是否存活
            print_scan(): 将添加了漏洞信息的ip_json队列输出到标准输出流中

    Author: Achelics
"""

import threading
import time as _time
import sys as _sys
from cyberlib_my_print import print_ip
from vs_scan_verify_api import vs_scan_verify
from vs_rtsp_fuzzer_api import check_rtsp_overflow
try:
    from vs_user_scan_verify_api import vs_user_scan_verify
except ImportError:
    pass

import global_variable as _gv

class VulverifyProcess(threading.Thread):

    def __init__(self, ip_json_array):
        """ Vulnerability verify thread init function.

        :param ip_json_array: The ip json list from the last sub software.
        """
        threading.Thread.__init__(self)
        self.ip_json_array = ip_json_array
        self._stop = False

    def run(self):
        """ Excute the thread.
            This function must have.
        :return:
        """
        for ip_json in self.ip_json_array:
            if self._stop:
                break
            vs_scan_verify(ip_json)
            # rtsp缓冲区溢出
            check_rtsp_overflow(ip_json)
            if _gv.USER_FLAG == 1:
                try:
                    vs_user_scan_verify(ip_json)
                except Exception, e:
                    _sys.stderr.write("[User self-define vulnerability]:" + self.__class__.__name__ + " 用户自定义漏洞脚本或者漏洞信息错误:" + str(e) + "\n")
                    _sys.stderr.flush()
            _time.sleep(1)
        # Nothing data to input.

    def stop(self):
        """ Set the stop flag of thread.
            This function must have.
        :return:
        """
        self._stop = True


    def is_running(self):
        """ Juge the thread state.
            This function must have.
        :return: self.isAlive(): juge the thread state
        """
        return self.isAlive()

    def print_scan(self):
        """ Output the ip_json with vulnerability verify information.
            This function must have.
        :return:
        """
        for ip_json in self.ip_json_array:
            print_ip(ip_json)

