#!/usr/bin/env python
# coding=utf-8

"""
    ID: vs_main.py
    Date: 2016/08/19
    Subject: 实现漏洞扫描函数的入口函数
    Author: Achelics
"""

import platform
import os as _os
import sys as _sys
import socket as _socket
import time as _time

import global_variable as _gv
from cyberlib_multi_scan_manager import MultiScanManager
from cyberlib_my_print import print_end
from cyberlib_std_input import StdInputHandler
from cyberlib_cmd_parser import CMDConfig
from cyberlib_log_stdout import StdOutLog
from cyberlib_const_parser import Config
from vs_scan_verify_api import init_vs_verify_scan
try:
    from vs_user_scan_verify_api import init_user_verify_scan
except ImportError:
    pass

from scan import vs_process
from tools.args_parse import *
from progress_reporter import ProgressReporter

__LOG_LEVEL__ = _gv.GLOBAL_LOG_LEVEL['vs_main']
__logger = StdOutLog(__LOG_LEVEL__)


if __name__ == '__main__':
    reload(_sys)
    _sys.setdefaultencoding('utf-8')

    # init the vs_func
    vs_func_file = _os.path.join(_gv.CONFIG_DIR, 'vs_func.ini')
    user_vul_config = Config(vs_func_file, 'baseConfig')
    _gv.USER_FLAG = user_vul_config.getint('is_user_vs')
    user_poc_path = user_vul_config.get('user_script_path')
    if _gv.USER_FLAG == 1:
        init_user_verify_scan(user_package_path=user_poc_path)

    # get the commend lines. The sentence must be prior in the load_vulnerability_lib().
    vul_flag = parser_args(CMDConfig(_gv.CONFIG_DIR + '/cmd_arg.ini').get_parser())
    vulscripts_file = _os.path.join(_gv.CONFIG_DIR, 'vul_name.txt')
    # Load vulnerability lib
    init_vs_verify_scan(vulscripts_file=vulscripts_file, vul_flag=vul_flag)

    # Set the socket timeout
    _socket.setdefaulttimeout(_gv.SOCK_TIMEOUT)

    # Start the multi_thread block
    MSM = MultiScanManager(vs_process.VulverifyProcess, _gv.IP_JSON_QUEUE, _gv.CONFIG_DIR, 'const.ini')
    MSM.setDaemon(True)
    MSM.start()

    PR = ProgressReporter()
    PR.setDaemon(True)
    # 启动进度报告模块
    PR.start()

    # Start the std input block
    STH = StdInputHandler(_gv.IP_JSON_QUEUE, MSM)
    STH.setDaemon(True)
    STH.start()

    # Block and wait the mutil_thread stop
    while True:
        try:
            # Juge the mutil_thread state
            if MSM.isAlive():
                _time.sleep(3)
                continue
            # If finished, stop thread.
            else:
                _time.sleep(1)
                PR.stop()
                _time.sleep(1)
                STH.stop()
                break
        # Ctrl^C, stop all thread.
        except KeyboardInterrupt:
            __logger.info('Keyboard Interruption, exit...', '[VulnerabilityScanner]')
            MSM.stop()
            break

    print_end()
